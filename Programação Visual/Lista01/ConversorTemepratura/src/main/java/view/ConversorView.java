/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import javax.swing.JOptionPane;
import logic.Conversor;

/**
 *
 * @author crist
 */
public class ConversorView extends javax.swing.JFrame {

    Conversor conversor;
    int op, option;
    double entrada = 0, resultado = 0;

    /**
     * Creates new form ConversorView
     */
    public ConversorView() {
        conversor = new Conversor();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tittle = new javax.swing.JLabel();
        exchangeButton = new javax.swing.JButton();
        inputOptions = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        outputOptions = new javax.swing.JComboBox<>();
        inputField = new javax.swing.JTextField();
        outputField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        kGradientPanel1 = new keeptoo.KGradientPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));

        tittle.setFont(new java.awt.Font("Roboto Black", 1, 14)); // NOI18N
        tittle.setForeground(new java.awt.Color(255, 255, 255));
        tittle.setText("CONVERSOR DE TEMPERATURAS");

        exchangeButton.setBackground(new java.awt.Color(0, 0, 0));
        exchangeButton.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        exchangeButton.setForeground(new java.awt.Color(255, 255, 255));
        exchangeButton.setText("<<    >>");
        exchangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exchangeButtonActionPerformed(evt);
            }
        });

        inputOptions.setBackground(new java.awt.Color(153, 153, 153));
        inputOptions.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        inputOptions.setForeground(new java.awt.Color(255, 255, 255));
        inputOptions.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Celsius", "Fahrenheit", "Kelvin", "" }));
        inputOptions.setMinimumSize(new java.awt.Dimension(122, 23));
        inputOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputOptionsActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Converter de:");

        jLabel3.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Para:");

        outputOptions.setBackground(new java.awt.Color(153, 153, 153));
        outputOptions.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        outputOptions.setForeground(new java.awt.Color(255, 255, 255));
        outputOptions.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Celsius", "Fahrenheit", "Kelvin", "" }));
        outputOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputOptionsActionPerformed(evt);
            }
        });

        inputField.setBackground(new java.awt.Color(0, 0, 0));
        inputField.setColumns(5);
        inputField.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        inputField.setForeground(new java.awt.Color(255, 255, 255));

        outputField.setEditable(false);
        outputField.setBackground(new java.awt.Color(0, 0, 0));
        outputField.setColumns(5);
        outputField.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        outputField.setForeground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        kGradientPanel1.setkEndColor(new java.awt.Color(19, 15, 64));
        kGradientPanel1.setkStartColor(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout kGradientPanel1Layout = new javax.swing.GroupLayout(kGradientPanel1);
        kGradientPanel1.setLayout(kGradientPanel1Layout);
        kGradientPanel1Layout.setHorizontalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 510, Short.MAX_VALUE)
        );
        kGradientPanel1Layout.setVerticalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 345, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(221, 221, 221)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(inputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(outputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(tittle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(203, 203, 203)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(exchangeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(outputOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(135, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(tittle, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jLabel2)
                .addGap(7, 7, 7)
                .addComponent(inputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(inputOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(exchangeButton)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(outputOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exchangeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exchangeButtonActionPerformed
        try {
            option = inputOptions.getSelectedIndex();

            switch (option) {
                // ===========================================|| CELSIUS -> ALL =====================================================
                case 1:
                    op = outputOptions.getSelectedIndex();
                    switch (op) {
                        case 1: // Celsius -> Celsius
                            outputField.setText(inputField.getText());
                            break;
                        case 2: // Celsius -> Fahrenheit
                            entrada = Double.parseDouble(inputField.getText());
                            resultado = conversor.celsiusFahrenheit(entrada);
                            outputField.setText(String.valueOf(resultado));
                            break;
                        case 3: // Kelvin
                            entrada = Double.parseDouble(inputField.getText());
                            resultado = conversor.celsiusKelvin(entrada);
                            outputField.setText(String.valueOf(resultado));
                            break;
                        default:
                            JOptionPane.showMessageDialog(this, "Escolha uma opção", "Opção Inválida", JOptionPane.INFORMATION_MESSAGE);
                            break;
                    }
                    break;
// ===========================================|| FAHRENHEIT -> ALL =====================================================
                case 2:
                    op = outputOptions.getSelectedIndex();
                    switch (op) {
                        case 1: // Fahrenheit -> Celsius
                            entrada = Double.parseDouble(inputField.getText());
                            resultado = conversor.fahrenheitCelsius(entrada);
                            outputField.setText(String.valueOf(resultado));
                            break;
                        case 2: // Fahrenheit -> Fahrenheit
                            outputField.setText(inputField.getText());
                            break;
                        case 3: // Fahrenheit -> Kelvin
                            entrada = Double.parseDouble(inputField.getText());
                            resultado = conversor.fahrenheitKelvin(entrada);
                            outputField.setText(String.valueOf(resultado));
                            break;
                        default:
                            JOptionPane.showMessageDialog(this, "Escolha uma opção", "Opção Inválida", JOptionPane.INFORMATION_MESSAGE);
                            break;
                    }
                    break;
// ===========================================|| KELVIN-> ALL =====================================================
                case 3:
                    op = outputOptions.getSelectedIndex();
                    switch (op) {
                        case 1: // Kelvin -> Celsius
                            entrada = Double.parseDouble(inputField.getText());
                            resultado = conversor.kelvinCeslius(entrada);
                            outputField.setText(String.valueOf(resultado));
                            break;
                        case 2: //Kelvin -> Fahrenheit
                            entrada = Double.parseDouble(inputField.getText());
                            resultado = conversor.kelvinFahrenheit(entrada);
                            outputField.setText(String.valueOf(resultado));
                            break;
                        case 3: // Kelvin -> Kelvvin
                            outputField.setText(inputField.getText());
                            break;
                        default:
                            JOptionPane.showMessageDialog(this, "Escolha uma opção", "Opção Inválida", JOptionPane.INFORMATION_MESSAGE);
                            break;
                    }
                    break;
                default:
                    JOptionPane.showMessageDialog(this, "Escolha uma opção", "Opção Inválida", JOptionPane.INFORMATION_MESSAGE);
                    break;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error", "ERROR", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_exchangeButtonActionPerformed

    private void inputOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputOptionsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputOptionsActionPerformed

    private void outputOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputOptionsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_outputOptionsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConversorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConversorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConversorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConversorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConversorView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exchangeButton;
    private javax.swing.JTextField inputField;
    private javax.swing.JComboBox<String> inputOptions;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private keeptoo.KGradientPanel kGradientPanel1;
    private javax.swing.JTextField outputField;
    private javax.swing.JComboBox<String> outputOptions;
    private javax.swing.JLabel tittle;
    // End of variables declaration//GEN-END:variables
}
